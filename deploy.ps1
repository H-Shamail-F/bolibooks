# BoliBooks Production Deployment Script
param(
    [string]$Environment = "production",
    [string]$Domain = "your-domain.com",
    [switch]$SkipBuild,
    [switch]$NginxOnly,
    [switch]$SSLSetup
)\n\nWrite-Host "üöÄ BoliBooks Production Deployment" -ForegroundColor Green\nWrite-Host "=" * 60 -ForegroundColor Yellow\n\n$ProjectRoot = "C:\\Users\\User\\bolibooks"\n\n# Check if running as administrator\nif (-NOT ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] \"Administrator\")) {\n    Write-Host "‚ùå This script requires administrator privileges" -ForegroundColor Red\n    Write-Host "Please run as administrator" -ForegroundColor Yellow\n    exit 1\n}\n\n# Create deployment directories\n$DeploymentDirs = @(\n    "C:\\inetpub\\wwwroot\\bolibooks",\n    "C:\\bolibooks\\backend",\n    "C:\\bolibooks\\logs",\n    "C:\\bolibooks\\uploads",\n    "C:\\bolibooks\\backups"\n)\n\nforeach ($dir in $DeploymentDirs) {\n    if (!(Test-Path $dir)) {\n        New-Item -ItemType Directory -Path $dir -Force | Out-Null\n        Write-Host "üìÅ Created directory: $dir" -ForegroundColor Green\n    }\n}\n\n# Install/Update Node.js and npm if needed\nfunction Install-NodeJS {\n    try {\n        $nodeVersion = node --version 2>$null\n        Write-Host "‚úÖ Node.js version: $nodeVersion" -ForegroundColor Green\n    } catch {\n        Write-Host "üì¶ Installing Node.js..." -ForegroundColor Yellow\n        # Add Node.js installation logic here\n        winget install OpenJS.NodeJS\n    }\n    \n    try {\n        $npmVersion = npm --version\n        Write-Host "‚úÖ npm version: $npmVersion" -ForegroundColor Green\n    } catch {\n        Write-Host "‚ùå npm not found" -ForegroundColor Red\n        exit 1\n    }\n}\n\n# Install PM2 for process management\nfunction Install-PM2 {\n    try {\n        $pm2Version = pm2 --version 2>$null\n        Write-Host "‚úÖ PM2 version: $pm2Version" -ForegroundColor Green\n    } catch {\n        Write-Host "üì¶ Installing PM2..." -ForegroundColor Yellow\n        npm install -g pm2\n        npm install -g pm2-windows-service\n        pm2-service-install\n    }\n}\n\n# Build and deploy backend\nfunction Deploy-Backend {\n    Write-Host "üîß Deploying Backend..." -ForegroundColor Cyan\n    \n    Set-Location "$ProjectRoot\\backend"\n    \n    if (!$SkipBuild) {\n        Write-Host "üì¶ Installing backend dependencies..." -ForegroundColor Yellow\n        npm ci --production\n    }\n    \n    # Copy backend files\n    robocopy "$ProjectRoot\\backend" "C:\\bolibooks\\backend" /E /XD node_modules .git\n    \n    # Install production dependencies\n    Set-Location "C:\\bolibooks\\backend"\n    npm ci --production --silent\n    \n    # Create PM2 ecosystem file\n    $pm2Config = @"\n{\n  \"apps\": [{\n    \"name\": \"bolibooks-backend\",\n    \"script\": \"src/server.js\",\n    \"cwd\": \"C:\\\\bolibooks\\\\backend\",\n    \"instances\": 1,\n    \"exec_mode\": \"cluster\",\n    \"env\": {\n      \"NODE_ENV\": \"$Environment\",\n      \"PORT\": \"5000\"\n    },\n    \"error_file\": \"C:\\\\bolibooks\\\\logs\\\\backend-error.log\",\n    \"out_file\": \"C:\\\\bolibooks\\\\logs\\\\backend-out.log\",\n    \"log_file\": \"C:\\\\bolibooks\\\\logs\\\\backend-combined.log\",\n    \"time\": true,\n    \"max_memory_restart\": \"300M\",\n    \"min_uptime\": \"10s\",\n    \"max_restarts\": 5,\n    \"restart_delay\": 4000\n  }]\n}\n\"@\n    \n    $pm2Config | Out-File -FilePath \"C:\\bolibooks\\ecosystem.config.json\" -Encoding UTF8\n    \n    Write-Host "‚úÖ Backend deployed successfully" -ForegroundColor Green\n}\n\n# Build and deploy frontend\nfunction Deploy-Frontend {\n    Write-Host "üé® Deploying Frontend..." -ForegroundColor Cyan\n    \n    Set-Location "$ProjectRoot\\frontend"\n    \n    if (!$SkipBuild) {\n        Write-Host "üì¶ Installing frontend dependencies..." -ForegroundColor Yellow\n        npm ci\n        \n        Write-Host "üî® Building frontend..." -ForegroundColor Yellow\n        $env:REACT_APP_API_URL = \"https://$Domain/api\"\n        npm run build\n    }\n    \n    # Copy built files to web server\n    if (Test-Path \"build\") {\n        robocopy \"build\" \"C:\\inetpub\\wwwroot\\bolibooks\" /E /PURGE\n        Write-Host "‚úÖ Frontend deployed successfully" -ForegroundColor Green\n    } else {\n        Write-Host "‚ùå Frontend build directory not found" -ForegroundColor Red\n        exit 1\n    }\n}\n\n# Generate Nginx configuration\nfunction Setup-Nginx {\n    Write-Host "üåê Setting up Nginx..." -ForegroundColor Cyan\n    \n    $nginxConfig = @\"\nserver {\n    listen 80;\n    server_name $Domain www.$Domain;\n    return 301 https://`$server_name`$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name $Domain www.$Domain;\n\n    # SSL Configuration\n    ssl_certificate /etc/ssl/certs/$Domain.crt;\n    ssl_certificate_key /etc/ssl/private/$Domain.key;\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers HIGH:!aNULL:!MD5;\n    ssl_prefer_server_ciphers on;\n\n    # Security headers\n    add_header X-Frame-Options DENY;\n    add_header X-Content-Type-Options nosniff;\n    add_header X-XSS-Protection \"1; mode=block\";\n    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always;\n\n    # Frontend static files\n    location / {\n        root C:/inetpub/wwwroot/bolibooks;\n        index index.html;\n        try_files `$uri `$uri/ /index.html;\n        \n        # Cache static assets\n        location ~* \\.(js|css|png|jpg|jpeg|gif|svg|woff|woff2|ttf|eot)$ {\n            expires 1y;\n            add_header Cache-Control \"public, immutable\";\n        }\n    }\n\n    # API proxy\n    location /api {\n        proxy_pass http://localhost:5000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade `$http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host `$host;\n        proxy_set_header X-Real-IP `$remote_addr;\n        proxy_set_header X-Forwarded-For `$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto `$scheme;\n        proxy_cache_bypass `$http_upgrade;\n        \n        # Timeout settings\n        proxy_connect_timeout 60s;\n        proxy_send_timeout 60s;\n        proxy_read_timeout 60s;\n    }\n\n    # File uploads\n    location /uploads {\n        alias C:/bolibooks/uploads;\n        expires 1d;\n    }\n\n    # Health check\n    location /health {\n        access_log off;\n        return 200 \"healthy\\n\";\n        add_header Content-Type text/plain;\n    }\n\n    # Rate limiting\n    location /api/auth {\n        limit_req zone=auth_limit burst=5 nodelay;\n        proxy_pass http://localhost:5000;\n        proxy_set_header Host `$host;\n        proxy_set_header X-Real-IP `$remote_addr;\n        proxy_set_header X-Forwarded-For `$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto `$scheme;\n    }\n}\n\n# Rate limiting zones\nhttp {\n    limit_req_zone `$binary_remote_addr zone=auth_limit:10m rate=10r/m;\n    limit_req_zone `$binary_remote_addr zone=api_limit:10m rate=100r/m;\n}\n\"@\n    \n    $nginxConfig | Out-File -FilePath \"C:\\bolibooks\\nginx.conf\" -Encoding UTF8\n    \n    Write-Host \"üìÑ Nginx configuration generated at C:\\bolibooks\\nginx.conf\" -ForegroundColor Green\n    Write-Host \"üí° Copy this to your nginx sites-available directory\" -ForegroundColor Yellow\n}\n\n# Create monitoring script\nfunction Setup-Monitoring {\n    Write-Host \"üìä Setting up monitoring...\" -ForegroundColor Cyan\n    \n    $monitorScript = @\"\n# BoliBooks System Monitor\n$logPath = \"C:\\bolibooks\\logs\"\n$maxLogSize = 100MB\n\n# Rotate logs if they get too large\nGet-ChildItem $logPath -Filter \"*.log\" | ForEach-Object {\n    if ($_.Length -gt $maxLogSize) {\n        Move-Item $_.FullName \"$($_.FullName).old\"\n        New-Item -Path $_.FullName -ItemType File | Out-Null\n    }\n}\n\n# Check if backend is running\n$backendHealth = try {\n    (Invoke-RestMethod -Uri \"http://localhost:5000/api/health\" -TimeoutSec 5).status\n} catch { \"DOWN\" }\n\n# Log health status\n$timestamp = Get-Date -Format \"yyyy-MM-dd HH:mm:ss\"\nAdd-Content -Path \"$logPath\\health.log\" -Value \"$timestamp Backend: $backendHealth\"\n\n# Restart if down\nif ($backendHealth -eq \"DOWN\") {\n    Write-Host \"Restarting backend service...\" -ForegroundColor Yellow\n    pm2 restart bolibooks-backend\n}\n\n# Database backup (if needed)\n$backupPath = \"C:\\bolibooks\\backups\\backup-$(Get-Date -Format 'yyyyMMdd-HHmmss').db\"\nif (Test-Path \"C:\\bolibooks\\backend\\database.sqlite\") {\n    Copy-Item \"C:\\bolibooks\\backend\\database.sqlite\" $backupPath\n    \n    # Keep only last 7 backups\n    Get-ChildItem \"C:\\bolibooks\\backups\" -Filter \"backup-*.db\" | \n        Sort-Object LastWriteTime -Descending | \n        Select-Object -Skip 7 | \n        Remove-Item -Force\n}\n\"@\n    \n    $monitorScript | Out-File -FilePath \"C:\\bolibooks\\monitor.ps1\" -Encoding UTF8\n    \n    # Create scheduled task for monitoring\n    $action = New-ScheduledTaskAction -Execute \"powershell.exe\" -Argument \"-File C:\\bolibooks\\monitor.ps1\"\n    $trigger = New-ScheduledTaskTrigger -RepetitionInterval (New-TimeSpan -Minutes 5) -RepetitionDuration (New-TimeSpan -Days 365) -At (Get-Date)\n    $principal = New-ScheduledTaskPrincipal -UserId \"SYSTEM\" -LogonType ServiceAccount\n    \n    Register-ScheduledTask -TaskName \"BoliBooks-Monitor\" -Action $action -Trigger $trigger -Principal $principal -Force\n    \n    Write-Host \"‚úÖ Monitoring setup completed\" -ForegroundColor Green\n}\n\n# SSL Certificate setup\nfunction Setup-SSL {\n    if ($SSLSetup) {\n        Write-Host \"üîí SSL Certificate Setup\" -ForegroundColor Cyan\n        Write-Host \"Please ensure you have SSL certificates ready:\" -ForegroundColor Yellow\n        Write-Host \"  ‚Ä¢ Certificate: /etc/ssl/certs/$Domain.crt\" -ForegroundColor White\n        Write-Host \"  ‚Ä¢ Private Key: /etc/ssl/private/$Domain.key\" -ForegroundColor White\n        Write-Host \"\\nFor Let's Encrypt certificates, run:\" -ForegroundColor Yellow\n        Write-Host \"  certbot --nginx -d $Domain -d www.$Domain\" -ForegroundColor White\n    }\n}\n\n# Main deployment workflow\nfunction Start-Deployment {\n    try {\n        Install-NodeJS\n        Install-PM2\n        \n        if (!$NginxOnly) {\n            Deploy-Backend\n            Deploy-Frontend\n        }\n        \n        Setup-Nginx\n        Setup-Monitoring\n        Setup-SSL\n        \n        # Start services\n        if (!$NginxOnly) {\n            Write-Host \"üöÄ Starting services...\" -ForegroundColor Cyan\n            Set-Location \"C:\\bolibooks\"\n            pm2 start ecosystem.config.json\n            pm2 save\n        }\n        \n        Write-Host \"\\n\" + \"=\"*60 -ForegroundColor Green\n        Write-Host \"üéâ BoliBooks Deployment Completed!\" -ForegroundColor Green\n        Write-Host \"=\"*60 -ForegroundColor Green\n        \n        Write-Host \"\\nüìã Next Steps:\" -ForegroundColor Cyan\n        Write-Host \"  1. Configure your domain DNS to point to this server\" -ForegroundColor White\n        Write-Host \"  2. Install and configure Nginx with the generated config\" -ForegroundColor White\n        Write-Host \"  3. Set up SSL certificates\" -ForegroundColor White\n        Write-Host \"  4. Update environment variables in .env files\" -ForegroundColor White\n        Write-Host \"  5. Test the application at https://$Domain\" -ForegroundColor White\n        \n        Write-Host \"\\nüîß Management Commands:\" -ForegroundColor Cyan\n        Write-Host \"  ‚Ä¢ View logs: pm2 logs bolibooks-backend\" -ForegroundColor White\n        Write-Host \"  ‚Ä¢ Restart backend: pm2 restart bolibooks-backend\" -ForegroundColor White\n        Write-Host \"  ‚Ä¢ Monitor processes: pm2 monit\" -ForegroundColor White\n        Write-Host \"  ‚Ä¢ Health check: curl https://$Domain/api/health\" -ForegroundColor White\n        \n    } catch {\n        Write-Host \"‚ùå Deployment failed: $($_.Exception.Message)\" -ForegroundColor Red\n        exit 1\n    }\n}\n\n# Run deployment\nStart-Deployment
