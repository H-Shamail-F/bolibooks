const axios = require('axios');
require('dotenv').config();

const BASE_URL = 'http://localhost:5000';
let authToken = '';
let testPaymentId = '';

// Test utilities
const logger = {
  info: (message, ...args) => console.log(`[${new Date().toISOString()}] ℹ️  ${message}`, ...args),
  error: (message, ...args) => console.error(`[${new Date().toISOString()}] ❌ ${message}`, ...args),
  warn: (message, ...args) => console.warn(`[${new Date().toISOString()}] ⚠️  ${message}`, ...args),
  success: (message, ...args) => console.log(`[${new Date().toISOString()}] ✅ ${message}`, ...args)
};

const makeRequest = async (method, url, data = null, useAuth = true) => {
  try {
    const config = {\n      method,\n      url: `${BASE_URL}${url}`,\n      headers: useAuth && authToken ? { Authorization: `Bearer ${authToken}` } : {}\n    };\n    \n    if (data) {\n      config.data = data;\n    }\n\n    const response = await axios(config);\n    return {\n      success: true,\n      status: response.status,\n      data: response.data\n    };\n  } catch (error) {\n    return {\n      success: false,\n      status: error.response?.status || 0,\n      data: error.response?.data || null,\n      error: error.message\n    };\n  }\n};\n\n// Test functions\nasync function testServerHealth() {\n  logger.info('Testing server health...');\n  const result = await makeRequest('GET', '/api/health', null, false);\n  \n  if (result.success && result.status === 200) {\n    logger.success('Server health check passed');\n    return true;\n  }\n  \n  logger.error('Server health check failed:', result);\n  return false;\n}\n\nasync function authenticateUser() {\n  logger.info('Authenticating test user...');\n  \n  const loginData = {\n    email: 'admin@test.com',\n    password: 'password123'\n  };\n  \n  const result = await makeRequest('POST', '/api/auth/login', loginData, false);\n  \n  if (result.success && result.data?.token) {\n    authToken = result.data.token;\n    logger.success('Authentication successful');\n    return true;\n  }\n  \n  logger.error('Authentication failed:', result);\n  return false;\n}\n\nasync function testPaymentConfiguration() {\n  logger.info('Testing payment configuration...');\n  const result = await makeRequest('GET', '/api/payments-enhanced/config');\n  \n  if (result.success) {\n    logger.success('Payment configuration retrieved:', JSON.stringify(result.data, null, 2));\n    return true;\n  }\n  \n  logger.error('Payment configuration test failed:', result);\n  return false;\n}\n\nasync function testPayPalStatus() {\n  logger.info('Testing PayPal status...');\n  const result = await makeRequest('GET', '/api/paypal/status');\n  \n  if (result.success) {\n    logger.success('PayPal status retrieved:', JSON.stringify(result.data, null, 2));\n    return true;\n  }\n  \n  logger.error('PayPal status test failed:', result);\n  return false;\n}\n\nasync function testStripePaymentCreation() {\n  logger.info('Testing Stripe payment intent creation...');\n  \n  const paymentData = {\n    amount: 100.00,\n    currency: 'usd',\n    description: 'Test payment integration'\n  };\n  \n  const result = await makeRequest('POST', '/api/payments-enhanced/create-payment-intent', paymentData);\n  \n  if (result.success) {\n    testPaymentId = result.data?.data?.paymentId;\n    logger.success('Stripe payment intent created successfully:', result.data?.data?.paymentIntentId || 'No ID returned');\n    return true;\n  } else if (result.status === 503 && result.data?.message?.includes('Stripe')) {\n    logger.warn('Stripe not configured (expected in test environment)');\n    return true; // This is expected without Stripe credentials\n  }\n  \n  logger.error('Stripe payment creation test failed:', result);\n  return false;\n}\n\nasync function testPayPalOrderCreation() {\n  logger.info('Testing PayPal order creation...');\n  \n  const orderData = {\n    amount: 50.00,\n    currency: 'USD',\n    description: 'Test PayPal payment integration'\n  };\n  \n  const result = await makeRequest('POST', '/api/paypal/create-order', orderData);\n  \n  if (result.success) {\n    logger.success('PayPal order created successfully:', result.data?.data?.orderId || 'No ID returned');\n    return true;\n  } else if (result.status === 503 && result.data?.message?.includes('PayPal')) {\n    logger.warn('PayPal not configured (expected in test environment)');\n    return true; // This is expected without PayPal credentials\n  }\n  \n  logger.error('PayPal order creation test failed:', result);\n  return false;\n}\n\nasync function testSubscriptionPlansAvailability() {\n  logger.info('Testing subscription plans API...');\n  const result = await makeRequest('GET', '/api/subscription-plans');\n  \n  if (result.success) {\n    logger.success(`Subscription plans retrieved: ${result.data?.data?.length || 0} plans available`);\n    return true;\n  }\n  \n  logger.error('Subscription plans test failed:', result);\n  return false;\n}\n\nasync function testPaymentHistory() {\n  logger.info('Testing payment history retrieval...');\n  const result = await makeRequest('GET', '/api/payments-enhanced/history');\n  \n  if (result.success) {\n    logger.success(`Payment history retrieved: ${result.data?.data?.payments?.length || 0} payments found`);\n    return true;\n  }\n  \n  logger.error('Payment history test failed:', result);\n  return false;\n}\n\nasync function testExistingEndpoints() {\n  logger.info('Testing existing core endpoints...');\n  \n  const endpoints = [\n    { name: 'Dashboard', path: '/api/reports/dashboard' },\n    { name: 'Company Profile', path: '/api/companies/profile' },\n    { name: 'Products', path: '/api/products' },\n    { name: 'Customers', path: '/api/customers' },\n    { name: 'POS Sales', path: '/api/pos/sales' }\n  ];\n  \n  let passedCount = 0;\n  \n  for (const endpoint of endpoints) {\n    const result = await makeRequest('GET', endpoint.path);\n    if (result.success) {\n      logger.success(`${endpoint.name} endpoint working`);\n      passedCount++;\n    } else {\n      logger.error(`${endpoint.name} endpoint failed:`, result.status, result.data?.message);\n    }\n  }\n  \n  logger.info(`Core endpoints test completed: ${passedCount}/${endpoints.length} passed`);\n  return passedCount === endpoints.length;\n}\n\n// Main test runner\nasync function runPaymentIntegrationTests() {\n  logger.info('🧪 Starting Payment Integration Tests...');\n  \n  const tests = [\n    { name: 'Server Health Check', fn: testServerHealth },\n    { name: 'User Authentication', fn: authenticateUser },\n    { name: 'Payment Configuration', fn: testPaymentConfiguration },\n    { name: 'PayPal Status Check', fn: testPayPalStatus },\n    { name: 'Stripe Payment Creation', fn: testStripePaymentCreation },\n    { name: 'PayPal Order Creation', fn: testPayPalOrderCreation },\n    { name: 'Subscription Plans API', fn: testSubscriptionPlansAvailability },\n    { name: 'Payment History', fn: testPaymentHistory },\n    { name: 'Core Endpoints Validation', fn: testExistingEndpoints }\n  ];\n  \n  let passed = 0;\n  let failed = 0;\n  \n  for (const test of tests) {\n    try {\n      logger.info(`\\n--- Running: ${test.name} ---`);\n      const result = await test.fn();\n      \n      if (result) {\n        passed++;\n        logger.success(`✅ ${test.name} PASSED`);\n      } else {\n        failed++;\n        logger.error(`❌ ${test.name} FAILED`);\n      }\n    } catch (error) {\n      failed++;\n      logger.error(`💥 ${test.name} CRASHED:`, error.message);\n    }\n    \n    // Small delay between tests\n    await new Promise(resolve => setTimeout(resolve, 500));\n  }\n  \n  // Test Summary\n  logger.info('\\n' + '='.repeat(60));\n  logger.info('🏁 PAYMENT INTEGRATION TEST RESULTS');\n  logger.info('='.repeat(60));\n  logger.info(`✅ Tests Passed: ${passed}`);\n  logger.info(`❌ Tests Failed: ${failed}`);\n  logger.info(`📊 Success Rate: ${((passed / (passed + failed)) * 100).toFixed(1)}%`);\n  \n  if (failed === 0) {\n    logger.success('🎉 ALL PAYMENT INTEGRATION TESTS PASSED!');\n  } else {\n    logger.warn(`⚠️  ${failed} tests failed. Review the issues above.`);\n  }\n  \n  return failed === 0;\n}\n\n// Wait for server to be ready\nfunction waitForServer(maxAttempts = 30) {\n  return new Promise((resolve) => {\n    let attempts = 0;\n    const checkServer = async () => {\n      attempts++;\n      const result = await makeRequest('GET', '/api/health', null, false);\n      \n      if (result.success) {\n        logger.success(`Server is ready after ${attempts} attempts`);\n        resolve(true);\n      } else if (attempts >= maxAttempts) {\n        logger.error(`Server not ready after ${maxAttempts} attempts`);\n        resolve(false);\n      } else {\n        setTimeout(checkServer, 1000);\n      }\n    };\n    checkServer();\n  });\n}\n\n// Run the tests\nif (require.main === module) {\n  (async () => {\n    logger.info('🚀 Waiting for BoliBooks server...');\n    const serverReady = await waitForServer();\n    \n    if (!serverReady) {\n      logger.error('❌ Server is not responding. Make sure the server is running on port 5000.');\n      process.exit(1);\n    }\n    \n    const success = await runPaymentIntegrationTests();\n    process.exit(success ? 0 : 1);\n  })();\n}\n\nmodule.exports = { runPaymentIntegrationTests };
