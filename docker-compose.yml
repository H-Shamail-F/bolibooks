version: '3.8'

services:
  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: bolibooks-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      HOST: 0.0.0.0
      CLIENT_URL: ${CLIENT_URL:-https://yourdomain.com}
      JWT_SECRET: ${JWT_SECRET:-change-this-in-production}
      DATABASE_URL: /app/data/database.sqlite
    volumes:
      - backend_data:/app/data
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
    ports:
      - "5000:5000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - bolibooks_network

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL:-https://api.yourdomain.com}
        REACT_APP_BASE_URL: ${REACT_APP_BASE_URL:-https://yourdomain.com}
    container_name: bolibooks-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - bolibooks_network

  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: bolibooks-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - backend_uploads:/var/www/uploads:ro
    depends_on:
      - backend
      - frontend
    networks:
      - bolibooks_network

  # Database Service (Optional - PostgreSQL for scaling)
  # Uncomment if you want to use PostgreSQL instead of SQLite
  # postgres:
  #   image: postgres:15-alpine
  #   container_name: bolibooks-postgres
  #   restart: unless-stopped
  #   environment:
  #     POSTGRES_DB: bolibooks
  #     POSTGRES_USER: ${POSTGRES_USER:-bolibooks}
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
  #     POSTGRES_HOST_AUTH_METHOD: md5
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #     - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
  #   ports:
  #     - "5432:5432"
  #   networks:
  #     - bolibooks_network

  # Redis (Optional - for caching and sessions)
  # redis:
  #   image: redis:7-alpine
  #   container_name: bolibooks-redis
  #   restart: unless-stopped
  #   command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-changeme}
  #   volumes:
  #     - redis_data:/data
  #   ports:
  #     - "6379:6379"
  #   networks:
  #     - bolibooks_network

volumes:
  backend_data:
    driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local
  # postgres_data:
  #   driver: local
  # redis_data:
  #   driver: local

networks:
  bolibooks_network:
    driver: bridge
